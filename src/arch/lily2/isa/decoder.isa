// -*- mode:c++ -*-

// Copyright (c) 2014 DSP Group, Institute of Microelectronics, Tsinghua University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// The actual LILY2 ISA decoder
//

decode FU default Unknown::unknown () {

    0x0: // FU(0x0).
        decode OPCODE_HI default Unknown::unknown () {

            0x0: // FU(0x0) + HI(0x0).
                decode OPCODE_ME default Unknown::unknown () {

                    0x0: // ADD-relative.
                        decode FLAG_IMM default Unknown::unknown () {
                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: ArithOp::add_a ({{ wd = add (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: ArithVecOp::add_b_4_a ({{ qbd = add_b_4 (qba, qbb); }});
                                            0x1: ArithVecOp::add_h_2_a ({{ dhd = add_h_2 (dha, dhb); }});
                                            0x2: ArithVecOp::add_h_4_a ({{ qhd = add_h_4 (qha, qhb); }});
                                            0x3: ArithVecOp::add_w_2_a ({{ dwd = add_w_2 (dwa, dwb); }});
                                        }
                                }
                            //0x1:
                        } // ADD-relative.
                }

            0x5: // FU(0b'00) + HI(0b'101).
                decode OPCODE_ME default Unknown::unknown () {

                    0x0,0x1: // MKL.
                        MoveImmOp::mkl_a ({{ wd = mkl (i16); wd_mask = maskGenOp32i (15, 0); }});
                    0x2,0x3: // MKH.
                        MoveImmOp::mkh_a ({{ wd = mkh (i16); wd_mask = maskGenOp32i (31, 16); }});

                }

        } // FU = A(0x0).
}
