// -*- mode:c++ -*-

// Copyright (c) 2014 DSP Group, Institute of Microelectronics, Tsinghua University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

////////////////////////////////////////////////////////////////////
//
// The actual LILY2 ISA decoder
//

decode FU default Unknown::unknown () {

    0x0: // FU(0x0).
        decode OPCODE_HI default Unknown::unknown () {

            0x0: // FU(0x0) + HI(0x0).
                decode OPCODE_ME default Unknown::unknown () {

                    0x0: // ADD-relative.
                        decode FLAG_IMM default Unknown::unknown () {
                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: ArithOp::add_a ({{ wd = add (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: ArithVecOp::add_b_4_a ({{ qbd = add_b_4 (qba, qbb); }});
                                            0x1: ArithVecOp::add_h_2_a ({{ dhd = add_h_2 (dha, dhb); }});
                                            0x2: ArithVecOp::add_h_4_a ({{ qhd = add_h_4 (qha, qhb); }});
                                            0x3: ArithVecOp::add_w_2_a ({{ dwd = add_w_2 (dwa, dwb); }});
                                        }
                                }
                            //0x1:
                        } // ADD-relative.
                }

            0x1: //< FU(0b'00) + HI(0b'001).
                decode OPCODE_ME default Unknown::unknown () {

                    0x0: //< AND.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: LogicOp::and_a ({{ wd = bitAnd (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: LogicVecOp::and_b_4_a ({{ qbd = bitAnd_b_4 (qba, qbb); }});
                                            0x1: LogicVecOp::and_h_2_a ({{ dhd = bitAnd_h_2 (dha, dhb); }});
                                            0x2: LogicVecOp::and_h_4_a ({{ qhd = bitAnd_h_4 (qha, qhb); }});
                                            0x3: LogicVecOp::and_w_2_a ({{ dwd = bitAnd_w_2 (dwa, dwb); }});
                                        }
                                }

                            0x1: LogicImmOp::and_i_a ({{ wd = bitAnd (wa, i8); }});

                        } //> AND.

                    0x1: //< NAD.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: LogicOp::nad_a ({{ wd = bitNad (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: LogicVecOp::nad_b_4_a ({{ qbd = bitNad_b_4 (qba, qbb); }});
                                            0x1: LogicVecOp::nad_h_2_a ({{ dhd = bitNad_h_2 (dha, dhb); }});
                                            0x2: LogicVecOp::nad_h_4_a ({{ qhd = bitNad_h_4 (qha, qhb); }});
                                            0x3: LogicVecOp::nad_w_2_a ({{ dwd = bitNad_w_2 (dwa, dwb); }});
                                        }
                                }

                            0x1: LogicImmOp::nad_i_a ({{ wd = bitNad (wa, i8); }});

                        } //> NAD.

                    0x2: //< ORR.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: LogicOp::orr_a ({{ wd = bitOrr (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: LogicVecOp::orr_b_4_a ({{ qbd = bitOrr_b_4 (qba, qbb); }});
                                            0x1: LogicVecOp::orr_h_2_a ({{ dhd = bitOrr_h_2 (dha, dhb); }});
                                            0x2: LogicVecOp::orr_h_4_a ({{ qhd = bitOrr_h_4 (qha, qhb); }});
                                            0x3: LogicVecOp::orr_w_2_a ({{ dwd = bitOrr_w_2 (dwa, dwb); }});
                                        }
                                }

                            0x1: LogicImmOp::orr_i_a ({{ wd = bitOrr (wa, i8); }});

                        } //> ORR.

                    0x3: //< NOR.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: LogicOp::nor_a ({{ wd = bitNor (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: LogicVecOp::nor_b_4_a ({{ qbd = bitNor_b_4 (qba, qbb); }});
                                            0x1: LogicVecOp::nor_h_2_a ({{ dhd = bitNor_h_2 (dha, dhb); }});
                                            0x2: LogicVecOp::nor_h_4_a ({{ qhd = bitNor_h_4 (qha, qhb); }});
                                            0x3: LogicVecOp::nor_w_2_a ({{ dwd = bitNor_w_2 (dwa, dwb); }});
                                        }
                                }

                            0x1: LogicImmOp::nor_i_a ({{ wd = bitNor (wa, i8); }});

                        } //> NOR.

                    0x4: //< XOR.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: LogicOp::xor_a ({{ wd = bitXor (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: LogicVecOp::xor_b_4_a ({{ qbd = bitXor_b_4 (qba, qbb); }});
                                            0x1: LogicVecOp::xor_h_2_a ({{ dhd = bitXor_h_2 (dha, dhb); }});
                                            0x2: LogicVecOp::xor_h_4_a ({{ qhd = bitXor_h_4 (qha, qhb); }});
                                            0x3: LogicVecOp::xor_w_2_a ({{ dwd = bitXor_w_2 (dwa, dwb); }});
                                        }
                                }

                            0x1: LogicImmOp::xor_i_a ({{ wd = bitXor (wa, i8); }});

                        } //> XOR.

                    0x5: //< NXR.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_VEC default Unknown::unknown () {
                                    0x0: LogicOp::nxr_a ({{ wd = bitNxr (wa, wb); }});
                                    0x1:
                                        decode VEC default Unknown::unknown () {
                                            0x0: LogicVecOp::nxr_b_4_a ({{ qbd = bitNxr_b_4 (qba, qbb); }});
                                            0x1: LogicVecOp::nxr_h_2_a ({{ dhd = bitNxr_h_2 (dha, dhb); }});
                                            0x2: LogicVecOp::nxr_h_4_a ({{ qhd = bitNxr_h_4 (qha, qhb); }});
                                            0x3: LogicVecOp::nxr_w_2_a ({{ dwd = bitNxr_w_2 (dwa, dwb); }});
                                        }
                                }

                            0x1: LogicImmOp::nxr_i_a ({{ wd = bitNxr (wa, i8); }});

                        } //> NXR.

                    0x7: //< NOT.
                        decode OPCODE_LO default Unknown::unknown () {

                            0x0: //< NOT.
                                decode FLAG_IMM default Unknown::unknown () {

                                    0x0:
                                        decode FLAG_VEC default Unknown::unknown () {
                                            0x0: LogicOp::not_a ({{ wd = bitNot (wa); }});
                                            0x1:
                                                decode VEC default Unknown::unknown () {
                                                    0x0: LogicVecOp::not_b_4_a ({{ qbd = bitNot_b_4 (qba); }});
                                                    0x1: LogicVecOp::not_h_2_a ({{ dhd = bitNot_h_2 (dha); }});
                                                    0x2: LogicVecOp::not_h_4_a ({{ qhd = bitNot_h_4 (qha); }});
                                                    0x3: LogicVecOp::not_w_2_a ({{ dwd = bitNot_w_2 (dwa); }});
                                                }
                                        }

                                } //> NOT.

                        } //> NOT.

                } //> FU(0b'00) + HI(0b'001).

            0x2: //< FU(0b'00) + HI(0b'010).
                decode OPCODE_ME default Unknown::unknown () {

                    0x0: //< TGT.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestOp::tgt_u_a ({{ wa = tgt_u (wa, wb); }});
                                    0x1: TestOp::tgt_a   ({{ wa = tgt   (wa, wb); }});
                                }

                            0x1:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestImmOp::tgt_u_i_a ({{ wa = tgt_u (wa, i8); }});
                                    0x1: TestImmOp::tgt_i_a   ({{ wa = tgt   (wa, i8); }});
                                }

                        } //> TGT.

                    0x1: //< TGE.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestOp::tge_u_a ({{ wa = tge_u (wa, wb); }});
                                    0x1: TestOp::tge_a   ({{ wa = tge   (wa, wb); }});
                                }

                            0x1:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestImmOp::tge_u_i_a ({{ wa = tge_u (wa, i8); }});
                                    0x1: TestImmOp::tge_i_a   ({{ wa = tge   (wa, i8); }});
                                }

                        } //> TGE.

                    0x2: //< TLT.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestOp::tlt_u_a ({{ wa = tlt_u (wa, wb); }});
                                    0x1: TestOp::tlt_a   ({{ wa = tlt   (wa, wb); }});
                                }

                            0x1:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestImmOp::tlt_u_i_a ({{ wa = tlt_u (wa, i8); }});
                                    0x1: TestImmOp::tlt_i_a   ({{ wa = tlt   (wa, i8); }});
                                }

                        } //> TLT.

                    0x3: //< TLE.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestOp::tle_u_a ({{ wa = tle_u (wa, wb); }});
                                    0x1: TestOp::tle_a   ({{ wa = tle   (wa, wb); }});
                                }

                            0x1:
                                decode FLAG_SIG default Unknown::unknown () {
                                    0x0: TestImmOp::tle_u_i_a ({{ wa = tle_u (wa, i8); }});
                                    0x1: TestImmOp::tle_i_a   ({{ wa = tle   (wa, i8); }});
                                }

                        } //> TLE.

                    0x4: //< TEQ.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0: TestOp::teq_a      ({{ wa = teq (wa, wb); }});
                            0x1: TestImmOp::teq_i_a ({{ wa = teq (wa, i8); }});

                        } //> TEQ.

                    0x5: //< TNE.
                        decode FLAG_IMM default Unknown::unknown () {

                            0x0: TestOp::tne_a      ({{ wa = tne (wa, wb); }});
                            0x1: TestImmOp::tne_i_a ({{ wa = tne (wa, i8); }});

                        } //> TNE.

                } //> FU(0b'00) + HI(0b'001).

            0x5: // FU(0b'00) + HI(0b'101).
                decode OPCODE_ME default Unknown::unknown () {

                    0x0,0x1: // MKL.
                        MoveImmOp::mkl_a ({{ wd = mkl (i16); wd_mask = maskGenOp32i (15, 0); }});
                    0x2,0x3: // MKH.
                        MoveImmOp::mkh_a ({{ wd = mkh (i16); wd_mask = maskGenOp32i (31, 16); }});

                }

        } // FU = A(0x0).
}
