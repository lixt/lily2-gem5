// -*- mode:c++ -*-

// Copyright (c) 2014 DSP Group, Institute of Microelectronics, Tsinghua University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

def operand_types {{

    # Scalar Operands.
    'sw'  : 'Op32i_t',  # Signed single word.
    'uw'  : 'Op32i_t',  # Unsigned single word.
    'sf'  : 'Op32f_t',  # Single single-precision.
    'df'  : 'Op64f_t',  # Single double-precision.

    # Vector Operands.
    'sqb' : 'Opq8i_t',  # Signed quadruple byte.
    'uqb' : 'Opq8i_t',  # Unsigned quadruple byte.
    'sdh' : 'Opd16i_t', # Signed dual halfword.
    'udh' : 'Opd16i_t', # Unsigned dual halfword.
    'sqh' : 'Opq16i_t', # Signed quadruple halfword.
    'uqh' : 'Opq16i_t', # Unsigned quadruple halfword.
    'sdw' : 'Opd32i_t', # Signed dual word.
    'udw' : 'Opd32i_t', # Unsigned dual word.
    'dsf' : 'Opd32f_t', # Dual single-precision.
}};

def operands {{

    # 32-bit integer operands.
    'wd': ('Op32i', 'sw', 'RD', '', 1),
    'wa': ('Op32i', 'sw', 'RA', '', 2),
    'wb': ('Op32i', 'sw', 'RB', '', 3),

    # Single-Precision operands.
    'sfd': ('Op32f', 'sf', 'RD', '', 1),
    'sfa': ('Op32f', 'sf', 'RA', '', 2),
    'sfb': ('Op32f', 'sf', 'RB', '', 3),

    # Double-Precision operands.
    'dfd': ('Op64f', 'df', 'DD', '', 1),
    'dfa': ('Op64f', 'df', 'DA', '', 2),
    'dfb': ('Op64f', 'df', 'DB', '', 3),

    # 4-Way 8-bit integer operands.
    'qbd': ('Opq8i', 'sqb', 'RD', '', 1),
    'qba': ('Opq8i', 'sqb', 'RA', '', 2),
    'qbb': ('Opq8i', 'sqb', 'RB', '', 3),

    # 2-Way 16-bit integer operands.
    'dhd': ('Opd16i', 'sdh', 'RD', '', 1),
    'dha': ('Opd16i', 'sdh', 'RA', '', 2),
    'dhb': ('Opd16i', 'sdh', 'RB', '', 3),

    # 4-Way 16-bit integer operands.
    'qhd': ('Opq16i', 'sqh', 'DD', '', 1),
    'qha': ('Opq16i', 'sqh', 'DA', '', 2),
    'qhb': ('Opq16i', 'sqh', 'DB', '', 3),

    # 2-Way 32-bit integer operands.
    'dwd': ('Opd32i', 'sdw', 'DD', '', 1),
    'dwa': ('Opd32i', 'sdw', 'DA', '', 2),
    'dwb': ('Opd32i', 'sdw', 'DB', '', 3),

    # 2-Way 32-bit floating-point operands.
    'dsfd': ('Opd32f', 'dsf', 'DD', '', 1),
    'dsfa': ('Opd32f', 'dsf', 'DA', '', 2),
    'dsfb': ('Opd32f', 'dsf', 'DB', '', 3),

    # Semantically meaningful operands.
    'w_carry' : ('Op32i', 'sw', 'CarryReg', '', 1),

    # Immediate operands.
    'i1' : ('I1_Op32i' , 'uw', 'IMM1' , '', 1),
    'i2' : ('I2_Op32i' , 'uw', 'IMM2' , '', 1),
    'i5' : ('I5_Op32i' , 'uw', 'IMM5' , '', 1),
    'i8' : ('I8_Op32i' , 'uw', 'IMM8' , '', 1),
    'i16': ('I16_Op32i', 'uw', 'IMM16', '', 1),
}};
