// -*- mode:c++ -*-
//
// Copyright (C) 2014 DSP Group, Institute of Microelectronics, Tsinghua University
// All rights reserved.

// Outputs to decoder.hh
output header {{
#include <iostream>

    // Base class for arithmetic instructions.
    class MoveOp : public Lily2StaticInst
    {
      protected:
        MoveOp (const char *mnemonic, MachInst machInst, OpClass opClass)
            : Lily2StaticInst (mnemonic, machInst, IntMoveOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };
}};

// Outputs to decoder.cc
output decoder {{
    std::string MoveOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        printDestOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 0);

        return ss.str ();
    }

    std::string MoveOp::generateOperation (void) const
    {
        std::stringstream ss;

        printDestOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 0);

        return ss.str ();
    }
}};

def format MoveOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'MoveOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};
