// -*- mode:c++ -*-
//
// Copyright (C) 2014 DSP Group, Institute of Microelectronics, Tsinghua University
// All rights reserved.

// Outputs to decoder.hh
output header {{
#include <iostream>

    // Base class for miscellaneous instructions.
    class MiscOp : public Lily2StaticInst
    {
      protected:
        MiscOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            Lily2StaticInst (mnemonic, machInst, IntMiscOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };
}};

// Outputs to decoder.cc
output decoder {{
    // Miscellaneous instructions.
    std::string MiscOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        if (getNumSrcOps () > 0) {
            printSrcOp (ss, 0);
        }

        return ss.str ();
    }

    std::string MiscOp::generateOperation (void) const
    {
        std::stringstream ss;

        if (getNumSrcOps () > 0) {
            printSrcOpValue (ss, 0);
        }

        return ss.str ();
    }
}};

def format MiscOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'MiscOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};
