// -*- mode:c++ -*-
//
// Copyright (C) 2014 DSP Group, Institute of Microelectronics, Tsinghua University
// All rights reserved.

// Outputs to decoder.hh
output header {{
#include <iostream>

    // Base class for division instructions.
    class DivOp : public Lily2StaticInst
    {
      protected:
        DivOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            Lily2StaticInst (mnemonic, machInst, IntDivOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };

    // Base class for floating-point division instructions.
    class DivFPOp : public Lily2StaticInst
    {
      protected:
        DivFPOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            Lily2StaticInst (mnemonic, machInst, FloatDivOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };

    // Base class for remainder instructions.
    class RemOp : public Lily2StaticInst
    {
      protected:
        RemOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            Lily2StaticInst (mnemonic, machInst, IntRemOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };
}};

// Outputs to decoder.cc
output decoder {{
    // Division instructions.
    std::string DivOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        printDestOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 1);

        return ss.str ();
    }

    std::string DivOp::generateOperation (void) const
    {
        std::stringstream ss;

        printDestOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 1);

        return ss.str ();
    }

    // Floating-Point division instructions.
    std::string DivFPOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        printDestOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 1);

        return ss.str ();
    }

    std::string DivFPOp::generateOperation (void) const
    {
        std::stringstream ss;

        printDestOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 1);

        return ss.str ();
    }

    // Remainder instructions.
    std::string RemOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        printDestOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 1);

        return ss.str ();
    }

    std::string RemOp::generateOperation (void) const
    {
        std::stringstream ss;

        printDestOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 1);

        return ss.str ();
    }
}};

def format DivOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'DivOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};

def format DivFPOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'DivFPOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};

def format RemOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'RemOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};
