// -*- mode:c++ -*-
//
// Copyright (C) 2014 DSP Group, Institute of Microelectronics, Tsinghua University
// All rights reserved.

// Outputs to decoder.hh
output header {{
#include <iostream>

    // Base class for memory instructions.
    class MemOp : public Lily2StaticInst
    {
      protected:
        MemOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            Lily2StaticInst (mnemonic, machInst, opClass) {}

      protected:
        Request::Flags memAccessFlags;
    };

    // Base class for load instructions.
    class MemLoadOp : public MemOp
    {
      protected:
        MemLoadOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            MemOp (mnemonic, machInst, IntMemLoadOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };

    // Base class for store instructions.
    class MemStoreOp : public MemOp
    {
      protected:
        MemStoreOp (const char *mnemonic, MachInst machInst, OpClass opClass) :
            MemOp (mnemonic, machInst, IntMemStoreOp) {}

        std::string generateDisassembly (Addr pc, const SymbolTable *symtab) const;
        std::string generateOperation (void) const;
    };
}};

// Outputs to decoder.cc
output decoder {{
    // Memory load instructions.
    std::string MemLoadOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        printDestOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 1);

        return ss.str ();
    }

    std::string MemLoadOp::generateOperation (void) const
    {
        std::stringstream ss;

        printDestOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 1);

        return ss.str ();
    }

    // Memory store instructions.
    std::string MemStoreOp::generateDisassembly (Addr pc, const SymbolTable *symtab) const
    {
        std::stringstream ss;

        printFuncUnit (ss);
        printCond (ss);
        printName (ss);

        printDestOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 0);
        ss << ",";
        printSrcOp (ss, 1);

        return ss.str ();
    }

    std::string MemStoreOp::generateOperation (void) const
    {
        std::stringstream ss;

        printDestOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 0);
        ss << ",";
        printSrcOpValue (ss, 1);

        return ss.str ();
    }
}};


def template LoadExecute {{
    Fault %(class_name)s::execute(%(CPU_exec_context)s *xc, Trace::InstRecord *traceData)
    {
        Addr EA;
        Fault fault = NoFault;

        %(op_decl)s;
        %(op_rd)s;

        if (fault == NoFault) {
            EA = EA_BASE + EA_OFFSET;
            %(code)s;
        }

        if (fault == NoFault) {
            %(op_wb)s;
        }

        return fault;
    }

    bool %(class_name)s::execCond (%(CPU_exec_context)s *xc) const
    {
        bool condOp = xc->readCond (this);
        return (getCondZ () == 0) ? condOp : !condOp;
    }
}};



def format MemLoadOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'MemLoadOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = LoadExecute.subst(iop)
}};

def format MemStoreOp(code, *opt_flags) {{
    iop = InstObjParams(name, Name, 'MemStoreOp', code, opt_flags)
    header_output = BasicDeclare.subst(iop)
    decoder_output = BasicConstructor.subst(iop)
    decode_block = CondNopCheckDecode.subst(iop)
    exec_output = BasicExecute.subst(iop)
}};
